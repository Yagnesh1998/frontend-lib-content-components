// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EditorContainer component render snapshot: initialized. enable save and pass to header 1`] = `
<div
  className="position-relative zindex-0"
>
  <BaseModal
    close={[MockFunction closeCancelConfirmModal]}
    confirmAction={
      <Button
        onClick={
          Object {
            "handleCancel": Object {
              "onClose": [MockFunction props.onClose],
            },
          }
        }
        variant="primary"
      >
        <FormattedMessage
          defaultMessage="OK"
          description="Label for OK button"
          id="authoring.editorContainer.okButton.label"
        />
      </Button>
    }
    footerAction={null}
    isOpen={false}
    size="md"
    title="Exit the editor?"
  >
    <FormattedMessage
      defaultMessage="Are you sure you want to exit the editor? Any unsaved changes will be lost."
      description="Description text for modal confirming cancellation"
      id="authoring.editorContainer.cancelConfirm.description"
    />
  </BaseModal>
  <ModalDialog.Header
    className="shadow-sm zindex-10"
  >
    <ModalDialog.Title>
      <div
        style={
          Object {
            "height": "44px",
            "margin": "auto",
          }
        }
      >
        <injectIntl(ShimmedIntlComponent)
          isInitialized={true}
        />
      </div>
      <div
        className="pgn__modal-close-container"
      >
        <IconButton
          iconAs="Icon"
          onClick={[MockFunction openCancelConfirmModal]}
          src={[MockFunction icons.Close]}
        />
      </div>
    </ModalDialog.Title>
  </ModalDialog.Header>
  <h1>
    My test content
  </h1>
  <injectIntl(ShimmedIntlComponent)
    disableSave={false}
    onCancel={[MockFunction openCancelConfirmModal]}
    onSave={
      Object {
        "handleSaveClicked": Object {
          "dispatch": [MockFunction react-redux.dispatch],
          "getContent": [MockFunction props.getContent],
          "validateEntry": [MockFunction props.validateEntry],
        },
      }
    }
  />
</div>
`;

exports[`EditorContainer component render snapshot: not initialized. disable save and pass to header 1`] = `
<div
  className="position-relative zindex-0"
>
  <BaseModal
    close={[MockFunction closeCancelConfirmModal]}
    confirmAction={
      <Button
        onClick={
          Object {
            "handleCancel": Object {
              "onClose": [MockFunction props.onClose],
            },
          }
        }
        variant="primary"
      >
        <FormattedMessage
          defaultMessage="OK"
          description="Label for OK button"
          id="authoring.editorContainer.okButton.label"
        />
      </Button>
    }
    footerAction={null}
    isOpen={false}
    size="md"
    title="Exit the editor?"
  >
    <FormattedMessage
      defaultMessage="Are you sure you want to exit the editor? Any unsaved changes will be lost."
      description="Description text for modal confirming cancellation"
      id="authoring.editorContainer.cancelConfirm.description"
    />
  </BaseModal>
  <ModalDialog.Header
    className="shadow-sm zindex-10"
  >
    <ModalDialog.Title>
      <div
        style={
          Object {
            "height": "44px",
            "margin": "auto",
          }
        }
      >
        <injectIntl(ShimmedIntlComponent)
          isInitialized={false}
        />
      </div>
      <div
        className="pgn__modal-close-container"
      >
        <IconButton
          iconAs="Icon"
          onClick={[MockFunction openCancelConfirmModal]}
          src={[MockFunction icons.Close]}
        />
      </div>
    </ModalDialog.Title>
  </ModalDialog.Header>
  <injectIntl(ShimmedIntlComponent)
    disableSave={true}
    onCancel={[MockFunction openCancelConfirmModal]}
    onSave={
      Object {
        "handleSaveClicked": Object {
          "dispatch": [MockFunction react-redux.dispatch],
          "getContent": [MockFunction props.getContent],
          "validateEntry": [MockFunction props.validateEntry],
        },
      }
    }
  />
</div>
`;
