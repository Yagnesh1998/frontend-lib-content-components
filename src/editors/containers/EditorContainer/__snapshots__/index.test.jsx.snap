// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EditorContainer component render snapshot: initialized. enable save and pass to header 1`] = `
<div>
  <ModalDialog.Header>
    <ModalDialog.Title>
      <injectIntl(ShimmedIntlComponent)
        isInitialized={true}
      />
      <div
        className="pgn__modal-close-container"
      >
        <IconButton
          iconAs="Icon"
          onClick={
            Object {
              "handleCancelClicked": Object {
                "onClose": [MockFunction props.onClose],
              },
            }
          }
          src={[MockFunction icons.Close]}
        />
      </div>
    </ModalDialog.Title>
  </ModalDialog.Header>
  <h1>
    My test content
  </h1>
  <injectIntl(ShimmedIntlComponent)
    disableSave={false}
    onCancel={
      Object {
        "handleCancelClicked": Object {
          "onClose": [MockFunction props.onClose],
        },
      }
    }
    onSave={
      Object {
        "handleSaveClicked": Object {
          "dispatch": [MockFunction react-redux.dispatch],
          "getContent": [MockFunction props.getContent],
          "validateEntry": [MockFunction props.validateEntry],
        },
      }
    }
  />
</div>
`;

exports[`EditorContainer component render snapshot: not initialized. disable save and pass to header 1`] = `
<div>
  <ModalDialog.Header>
    <ModalDialog.Title>
      <injectIntl(ShimmedIntlComponent)
        isInitialized={false}
      />
      <div
        className="pgn__modal-close-container"
      >
        <IconButton
          iconAs="Icon"
          onClick={
            Object {
              "handleCancelClicked": Object {
                "onClose": [MockFunction props.onClose],
              },
            }
          }
          src={[MockFunction icons.Close]}
        />
      </div>
    </ModalDialog.Title>
  </ModalDialog.Header>
  <injectIntl(ShimmedIntlComponent)
    disableSave={true}
    onCancel={
      Object {
        "handleCancelClicked": Object {
          "onClose": [MockFunction props.onClose],
        },
      }
    }
    onSave={
      Object {
        "handleSaveClicked": Object {
          "dispatch": [MockFunction react-redux.dispatch],
          "getContent": [MockFunction props.getContent],
          "validateEntry": [MockFunction props.validateEntry],
        },
      }
    }
  />
</div>
`;
